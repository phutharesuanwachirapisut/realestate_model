from flask import Flask, request, jsonify
from catboost import CatBoostRegressor
import pandas as pd
import numpy as np
import json
import datetime

# üöÄ Initialize app
app = Flask(__name__)

# üì¶ Load model
model = CatBoostRegressor()
model.load_model("catboost_model.cbm")

# üìÑ Load metadata
with open("columns.json", "r") as f:
    meta = json.load(f)

column_order = meta["columns"]
cat_features = meta["cat_features"]

# üîç Preprocessing function (‡πÉ‡∏ä‡πâ Year ‡∏ï‡∏£‡∏á ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß)
def preprocess_input(data: dict):
    df = pd.DataFrame([data])

    # ‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á Year ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á ‡πÜ ‡πÄ‡∏•‡∏¢
    # ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö Year_Built ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô input ‡πÅ‡∏•‡πâ‡∏ß

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    for col in column_order:
        if col not in df.columns:
            df[col] = np.nan  # ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ column ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô input

    df = df[column_order]  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô train
    return df

# üéØ Route for prediction
@app.route("/predict", methods=["POST"])
def predict():
    try:
        data = request.get_json()
        X_input = preprocess_input(data)
        pred = model.predict(X_input)[0]
        return jsonify({"prediction": round(pred, 2)})
    except Exception as e:
        return jsonify({"error": str(e)})

# üèÅ Run the app (for local testing only)
if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
